name: CI/CD

on:
  pull_request:
  push:
    branches:
    - master

jobs:
  ci:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Install
      run: npm install
    - name: Lint
      run: npm run lint
    - name: Audit
      run: npm audit --production
    - name: Build
      run: npm run build
    - name: Archive Production Artifact
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: build

  cypress:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: retrograde
      backend:
        image: gcr.io/retrograde/retrograde:latest
        env:
          PORT: 8000
          ALLOWED_ORIGINS: .*
          SECRET_KEY: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          ENVIRONMENT: development
          PSQL_CONNECTION_STRING: postgres://postgres:postgres@postgres/retrograde
          PSQL_CONNECTION_POOL_SIZE: 3
          SECURE_COOKIE: false
        ports:
          - 8000:8000
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - uses: cypress-io/github-action@v2
      with:
        build: env BUILD_ENV=development npm run build
        start: npm start
        browser: chrome
    - name: Dump docker logs on failure
      if: always()
      uses: jwalton/gh-docker-logs@v1

  cd:
    runs-on: ubuntu-latest
    needs:
      - ci
      - cypress
    if: "!contains(github.event.head_commit.message, '[skip ci]') && github.ref == 'refs/heads/master'"
    steps:
    - uses: actions/checkout@v1
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: build
        path: build
    - name: Deploy
      uses: w9jds/firebase-action@master
      with:
        args: deploy --only hosting
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
